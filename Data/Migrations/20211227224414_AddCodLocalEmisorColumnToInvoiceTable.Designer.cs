// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nebula.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Nebula.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211227224414_AddCodLocalEmisorColumnToInvoiceTable")]
    partial class AddCodLocalEmisorColumnToInvoiceTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Nebula.Data.Models.CajaDiaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid?>("InvoiceSerieId")
                        .HasColumnType("uuid");

                    b.Property<string>("Month")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("TotalApertura")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCierre")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalContabilizado")
                        .HasColumnType("numeric");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceSerieId");

                    b.ToTable("CajasDiaria");
                });

            modelBuilder.Entity("Nebula.Data.Models.CashierDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CajaDiariaId")
                        .HasColumnType("integer");

                    b.Property<string>("Contact")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Document")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Glosa")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Total")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("TypeOperation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CajaDiariaId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("CashierDetails");
                });

            modelBuilder.Entity("Nebula.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Nebula.Data.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CodLocalEmisor")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("CpeSunat")
                        .HasColumnType("text");

                    b.Property<string>("CuentaBancoDetraccion")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FileControl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FileSunat")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal?>("MontoDetraccion")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PorcentajeIgv")
                        .HasColumnType("numeric");

                    b.Property<string>("Ruc")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("RznSocial")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("TextoDetraccion")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("TipMoneda")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("UrlApi")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal?>("ValorImpuestoBolsa")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Nebula.Data.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("DocType")
                        .HasColumnType("integer");

                    b.Property<string>("Document")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Nebula.Data.Models.InventoryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("Month")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Motivo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("NoteType")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Remark")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Year")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InventoryNotes");
                });

            modelBuilder.Entity("Nebula.Data.Models.InventoryNoteDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("InventoryNoteId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("InventoryNoteId");

                    b.ToTable("InventoryNoteDetails");
                });

            modelBuilder.Entity("Nebula.Data.Models.InventoryReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("InventoryReasons");
                });

            modelBuilder.Entity("Nebula.Data.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CodLocalEmisor")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("DocType")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FecEmision")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FecVencimiento")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("HorEmision")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("InvoiceType")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Month")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("NumDocUsuario")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Number")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("RznSocialUsuario")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("Serie")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("SumImpVenta")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SumPrecioVenta")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SumTotTributos")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SumTotValVenta")
                        .HasColumnType("numeric");

                    b.Property<string>("TipDocUsuario")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("TipMoneda")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("TipOperacion")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Year")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Nebula.Data.Models.InvoiceAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountType")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int?>("Cuota")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Month")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Number")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Serie")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Year")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceAccounts");
                });

            modelBuilder.Entity("Nebula.Data.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CodProducto")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodProductoSunat")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodTipTributoIcbperItem")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodTipTributoIgvItem")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodTriIcbper")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodTriIgv")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodUnidadMedida")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("CtdBolsasTriIcbperItem")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CtdUnidadItem")
                        .HasColumnType("numeric");

                    b.Property<string>("DesItem")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MtoBaseIgvItem")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoIgvItem")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoPrecioVentaUnitario")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoTriIcbperItem")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoTriIcbperUnidad")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoValorReferencialUnitario")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoValorUnitario")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoValorVentaItem")
                        .HasColumnType("numeric");

                    b.Property<string>("NomTributoIcbperItem")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("NomTributoIgvItem")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PorIgvItem")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("SumTotTributosItem")
                        .HasColumnType("numeric");

                    b.Property<string>("TipAfeIgv")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("Nebula.Data.Models.InvoiceNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CodLocalEmisor")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodMotivo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("DesMotivo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FecEmision")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("HorEmision")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Month")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("NumDocAfectado")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("NumDocUsuario")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("RznSocialUsuario")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("SumDescTotal")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SumImpVenta")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SumOtrosCargos")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SumPrecioVenta")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SumTotTributos")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SumTotValVenta")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SumTotalAnticipos")
                        .HasColumnType("numeric");

                    b.Property<string>("TipDocAfectado")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("TipDocUsuario")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("TipMoneda")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("TipOperacion")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Year")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceNotes");
                });

            modelBuilder.Entity("Nebula.Data.Models.InvoiceNoteDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CodProducto")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodProductoSunat")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodTipTributoIcbperItem")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodTipTributoIgvItem")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodTriIcbper")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodTriIgv")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CodUnidadMedida")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("CtdBolsasTriIcbperItem")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CtdUnidadItem")
                        .HasColumnType("numeric");

                    b.Property<string>("DesItem")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("InvoiceNoteId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MtoBaseIgvItem")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoIgvItem")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoPrecioVentaUnitario")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoTriIcbperItem")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoTriIcbperUnidad")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoValorReferencialUnitario")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoValorUnitario")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoValorVentaItem")
                        .HasColumnType("numeric");

                    b.Property<string>("NomTributoIcbperItem")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("NomTributoIgvItem")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PorIgvItem")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("SumTotTributosItem")
                        .HasColumnType("numeric");

                    b.Property<string>("TipAfeIgv")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNoteId");

                    b.ToTable("InvoiceNoteDetails");
                });

            modelBuilder.Entity("Nebula.Data.Models.InvoiceSerie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Boleta")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("CounterBoleta")
                        .HasColumnType("integer");

                    b.Property<int>("CounterFactura")
                        .HasColumnType("integer");

                    b.Property<int>("CounterNotaDeVenta")
                        .HasColumnType("integer");

                    b.Property<string>("Factura")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("NotaDeVenta")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InvoiceSeries");
                });

            modelBuilder.Entity("Nebula.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Barcode")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal?>("FromQty")
                        .HasColumnType("numeric");

                    b.Property<string>("Icbper")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("IgvSunat")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PathImage")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal?>("Price1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Price2")
                        .HasColumnType("numeric");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("UndMedidaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UndMedidaId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Nebula.Data.Models.TransferNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Month")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Motivo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("OriginId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Year")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("OriginId");

                    b.HasIndex("TargetId");

                    b.ToTable("TransferNotes");
                });

            modelBuilder.Entity("Nebula.Data.Models.TransferNoteDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int?>("TransferNoteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TransferNoteId");

                    b.ToTable("TransferNoteDetails");
                });

            modelBuilder.Entity("Nebula.Data.Models.Tributo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CodTipTributo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("IdeTributo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Month")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal?>("MtoBaseImponible")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MtoTributo")
                        .HasColumnType("numeric");

                    b.Property<string>("NomTributo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Year")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Tributos");
                });

            modelBuilder.Entity("Nebula.Data.Models.TypeOperationSunat", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("TypeOperationSunat");
                });

            modelBuilder.Entity("Nebula.Data.Models.UndMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("SunatCode")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("UndMedida");
                });

            modelBuilder.Entity("Nebula.Data.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Remark")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nebula.Data.Models.CajaDiaria", b =>
                {
                    b.HasOne("Nebula.Data.Models.InvoiceSerie", "InvoiceSerie")
                        .WithMany()
                        .HasForeignKey("InvoiceSerieId");

                    b.Navigation("InvoiceSerie");
                });

            modelBuilder.Entity("Nebula.Data.Models.CashierDetail", b =>
                {
                    b.HasOne("Nebula.Data.Models.CajaDiaria", "CajaDiaria")
                        .WithMany()
                        .HasForeignKey("CajaDiariaId");

                    b.HasOne("Nebula.Data.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.Navigation("CajaDiaria");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Nebula.Data.Models.InventoryNote", b =>
                {
                    b.HasOne("Nebula.Data.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Nebula.Data.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Contact");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Nebula.Data.Models.InventoryNoteDetail", b =>
                {
                    b.HasOne("Nebula.Data.Models.InventoryNote", "InventoryNote")
                        .WithMany("InventoryNoteDetails")
                        .HasForeignKey("InventoryNoteId");

                    b.Navigation("InventoryNote");
                });

            modelBuilder.Entity("Nebula.Data.Models.InvoiceAccount", b =>
                {
                    b.HasOne("Nebula.Data.Models.Invoice", "Invoice")
                        .WithMany("InvoiceAccounts")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Nebula.Data.Models.InvoiceDetail", b =>
                {
                    b.HasOne("Nebula.Data.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Nebula.Data.Models.InvoiceNoteDetail", b =>
                {
                    b.HasOne("Nebula.Data.Models.InvoiceNote", "InvoiceNote")
                        .WithMany("InvoiceNoteDetails")
                        .HasForeignKey("InvoiceNoteId");

                    b.Navigation("InvoiceNote");
                });

            modelBuilder.Entity("Nebula.Data.Models.InvoiceSerie", b =>
                {
                    b.HasOne("Nebula.Data.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Nebula.Data.Models.Product", b =>
                {
                    b.HasOne("Nebula.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Nebula.Data.Models.UndMedida", "UndMedida")
                        .WithMany()
                        .HasForeignKey("UndMedidaId");

                    b.Navigation("Category");

                    b.Navigation("UndMedida");
                });

            modelBuilder.Entity("Nebula.Data.Models.TransferNote", b =>
                {
                    b.HasOne("Nebula.Data.Models.Warehouse", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.HasOne("Nebula.Data.Models.Warehouse", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId");

                    b.Navigation("Origin");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Nebula.Data.Models.TransferNoteDetail", b =>
                {
                    b.HasOne("Nebula.Data.Models.TransferNote", "TransferNote")
                        .WithMany("TransferNoteDetails")
                        .HasForeignKey("TransferNoteId");

                    b.Navigation("TransferNote");
                });

            modelBuilder.Entity("Nebula.Data.Models.Tributo", b =>
                {
                    b.HasOne("Nebula.Data.Models.Invoice", "Invoice")
                        .WithMany("Tributos")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Nebula.Data.Models.InventoryNote", b =>
                {
                    b.Navigation("InventoryNoteDetails");
                });

            modelBuilder.Entity("Nebula.Data.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceAccounts");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("Tributos");
                });

            modelBuilder.Entity("Nebula.Data.Models.InvoiceNote", b =>
                {
                    b.Navigation("InvoiceNoteDetails");
                });

            modelBuilder.Entity("Nebula.Data.Models.TransferNote", b =>
                {
                    b.Navigation("TransferNoteDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
